import React, { useState} from "react";
import { Button } from "react-bootstrap";
import { QuizProgressBar } from "../quiz-components/ProgressBar";
import {detailedQuestions, Question} from '../quiz-components/DetailedQuestions';

export function DetailedPage(): React.JSX.Element {
  const [formData, setFormData] = useState({
    strengths: '',
    interests: '',
    workEnvironment: '',
    preferredTasks: '',
    idealWork: '',
    role: '',
    skills: '',
    values: ''
  });
  const [progress, setProgress] = useState<number>(0);
  //const [submitted, setSubmitted] = useState(false);
  const [completedQuestions, setCompletedQuestions] = useState<Record<string, boolean>>({});

//generated by chatgpt
  function markComplete(question: Question): void {
    if (!completedQuestions[question.name]) {
      setCompletedQuestions(prev => ({ ...prev, [question.name]: true }));
      setProgress(prev => prev + 1);
    }
  }

  function markUncomplete(question: Question): void {
    if (completedQuestions[question.name]) {
      setCompletedQuestions(prev => ({ ...prev, [question.name]: false }));
      setProgress(prev => prev - 1);
    }
  }
//end gpt

  const handleChange= (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, question:Question) => {
    if (e.target.value.length>0){
      markComplete(question)
    }
    if (e.target.value.length===0){
      markUncomplete(question)
    }
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('User Responses:', formData);
  };

  return (
    <div>
      <h1>Detailed Career Assessment</h1>
      <QuizProgressBar questions={8} progress={progress}></QuizProgressBar>
      <form onSubmit={handleSubmit}>
        {detailedQuestions.map((question) => (
        <div key={question.name}>
          <label>{question.label}</label>
          <br></br>

          <textarea
          name={question.name}
          value={formData[question.name as keyof typeof formData]}
          onChange={(e) => handleChange(e, question)}
          style={{ width: '500px', height: '75px' }}
          />
        </div>))}
        {}
        <Button disabled={progress !== 8} type="submit">Submit</Button>
      </form>
    </div>
  );
}