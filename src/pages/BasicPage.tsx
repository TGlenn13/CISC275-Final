import  React, { useState } from "react";
import { Button } from "react-bootstrap";
import {QuizProgressBar} from "../quiz-components/ProgressBar";
import {QuestionPage, Question} from "../quiz-components/QuestionPage";
import { MultipleChoiceQuestion } from "../quiz-components/MultipleChoiceQuestion";
import './BasicPage.css';
import { SubmissionPopup } from "../quiz-components/SubmissionPopup";

// Used to initialize questions with data before all Question fields are filled in
interface InitialMultipleChoice {
    question: string;
    options: string[];
}

interface MultipleChoice extends Question {
    options: string[];
}

// Used to format question response pairs before sending over to OpenAI
export interface QuestionResponse {
    question: string;
    response: string;
}

export function BasicPage({changePage, setQuizResponses}:
    {changePage: (pageName:"results") => void, setQuizResponses: (responses: string) => void}): React.JSX.Element{
    const [progress, setProgress] = useState<number>(0);
    const [answers, setAnswers] = useState<string[]>(Array(8).fill(""));
    const [show, setShow] = useState(false);

    const renderQuestion = (question: MultipleChoice, index: number) =>
    <MultipleChoiceQuestion key={index} {...question}></MultipleChoiceQuestion>

    const changeAnswer = (index: number, answer: string) => {
        // When an answer is selected in a multiple choice question, update state
        const updated = [...answers];
        // update progress bar if unanswered
        if (updated[index] === "") {
            setProgress(progress + 1);
        }
        updated[index] = answer;
        setAnswers(updated);
    }

    const questions: InitialMultipleChoice[] = [
        {
            question: "1. Which activity sounds the most enjoyable to you?",
            options: [
                "Solving puzzles or analyzing data",
                "Creating art, music, or writing stories",
                "Helping people solve personal or emotional problems",
                "Building or repairing things with your hands",
                "Leading a team or organizing an event"
            ]
        },
        {
            question: "2. How do you typically make decisions?",
            options: [
                "Based on logic, facts, and data",
                "Through creativity and intuition",
                "By considering others' feelings and needs",
                "From experience and practicality",
                "Strategically and with long-term goals in mind"
            ]
        },
        {
            question: "3. What type of environment do you prefer to work in?",
            options: [
                "Quiet, focused, and independent",
                "Dynamic, expressive, and collaborative",
                "Supportive and empathetic",
                "Hands-on, physical, and practical",
                "Fast-paced, strategic, and goal-oriented"
            ]
        },
        {
            question: "4. What kind of tasks do you find most satisfying?",
            options: [
                "Researching, investigating, or experimenting",
                "Designing, writing, or performing",
                "Listening, counseling, or caring for others",
                "Assembling, fixing, or operating tools or machinery",
                "Planning, negotiating, or managing"
            ]
        },
        {
            question: "5. Which school subject did you (or do you) enjoy the most?",
            options: [
                "Math or Science",
                "Art, Literature, or Music",
                "Psychology or Social Studies",
                "Woodshop, Engineering, or Home Economics",
                "Business or Economics"
            ]
        },
        {
            question: "6. How would your friends describe you?",
            options: [
                "Analytical and thoughtful",
                "Imaginative and expressive",
                "Empathetic and supportive",
                "Resourceful and hands-on",
                "Ambitious and persuasive"
            ]
        },
        {
            question: "7. What motivates you most in a career?",
            options: [
                "Solving complex problems and discovering new things",
                "Expressing myself and inspiring others",
                "Making a positive difference in peopleâ€™s lives",
                "Creating tangible results with my work",
                "Achieving success and recognition"
            ]
        },
        {
            question: "8. What do you value most in a job?",
            options: [
                "Intellectual challenge",
                "Creative freedom",
                "Human connection",
                "Practical skills and independence",
                "Financial success and leadership opportunities"
            ]
        }
    ];

    // generated by chatGPT, formats question data to be used by questionPage
    const groupedQuestions: MultipleChoice[][] = [
        questions.slice(0, 4).map((q, i) => ({
            ...q,
            selectedAnswer: answers[i],
            onAnswerChange: (a: string) => changeAnswer(i, a)
        })),
        questions.slice(4, 8).map((q, i) => ({
            ...q,
            selectedAnswer: answers[i + 4],
            onAnswerChange: (a: string) => changeAnswer(i + 4, a)
        }))
    ];
    // end gpt

    const handleSubmit = () => {
        setShow(true);
        console.log("submitted");
        // Merge questions and user responses into array of QuestionResponses
        const responseArray: QuestionResponse[] = questions.map(
            (question: InitialMultipleChoice, index: number) => ({
            question: question.question,
            response: answers[index],
        }))
        // Map QuestionResponses to strings, then join those strings with newlines
        const responseString: string = responseArray.map((response: QuestionResponse) => (
            response.question + "\nAnswer: " + response.response 
        )).join("\n\n")
        setQuizResponses(responseString);
    }

    return(
    <div className="BasicPage">
        <h1 className='hdr'>Basic Career Assessment</h1>
        <QuizProgressBar questions={8} progress={progress}></QuizProgressBar>
        <br></br>
        <div>
            <QuestionPage renderQuestion={renderQuestion} questionGroups={groupedQuestions}></QuestionPage>
            <Button className="submit" disabled={progress!==8} onClick={handleSubmit}>Submit</Button>
        </div>
    <SubmissionPopup show={show} setShow={setShow} changePage={changePage}></SubmissionPopup>
    </div>
    );
}